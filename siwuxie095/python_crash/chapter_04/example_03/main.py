"""

创建数值列表

需要存储一组数的原因有很多。例如，在游戏中，需要跟踪每个角色的位置，还可能需要跟踪玩家的几个最高得分；
在数据可视化中，处理的几乎都是由数（如温度、距离、人口数量、经度和纬度等）组成的集合。

列表非常适合用于存储数字集合，而 Python 提供了很多工具，可帮助你高效地处理数字列表。明白如何有效地
使用这些工具后，即便列表包含数百万个元素，你编写的代码也能运行得很好。



1、使用函数 range()

Python 函数 range() 让你能够轻松地生成一系列数。例如，可以像下面这样使用函数 range() 来打印一
系列数：

for value in range(1, 5):
    print(value)

上述代码好像应该打印数 1～5，但实际上不会打印 5：

1
2
3
4

在这个示例中，range() 只打印数 1～4。这是编程语言中常见的差一行为的结果。函数 range() 让
Python 从指定的第一个值开始数，并在到达你指定的第二个值时停止。因为它在第二个值处停止，所以
输出不包含该值（这里为 5）。

要打印数 1～5，需要使用range(1,6)：

for value in range(1, 6):
    print(value)

这样，输出将从 1 开始、到 5 结束：

1
2
3
4
5

使用 range() 时，如果输出不符合预期，请尝试将指定的值加 1 或减 1。

调用函数 range() 时，也可只指定一个参数，这样它将从 0 开始。例如，range(6) 返回数 0～5。



2、使用 range() 创建数字列表

要创建数字列表，可使用函数 list() 将 range() 的结果直接转换为列表。如果将 range() 作为 list()
的参数，输出将是一个数字列表。

在上面的示例中，只是将一系列数打印出来。要将这组数转换为列表，可使用 list()：

numbers = list(range(1, 6))
print(numbers)

结果如下：

[1, 2, 3, 4, 5]

使用函数 range() 时，还可指定步长。为此，可给这个函数指定第三个参数，Python 将根据这个步长来生成数。

例如，下面的代码打印 1～10 的偶数：

even_numbers = list(range(2, 11, 2))
print(even_numbers)

在这个示例中，函数 range() 从 2 开始数，然后不断加 2，直到达到或超过终值（11），因此输出如下：

[2, 4, 6, 8, 10]

使用函数 range() 几乎能够创建任何需要的数集。例如，如何创建一个列表，其中包含前 10 个整数（1～10）
的平方呢？在 Python 中，用两个星号（**）表示乘方运算。下面的代码演示了如何将前 10 个整数的平方加入
一个列表中：

❶ squares = []
❷ for value in range(1, 11):
❸     square = value ** 2
❹     squares.append(square)

❺ print(squares)

首先，创建一个名为 squares 的空列表（见❶）。接下来，使用函数 range() 让 Python 遍历 1～10
的值（见❷）。在循环中，计算当前值的平方，并将结果赋给变量 square（见❸）。然后，将新计算得到的
平方值附加到列表 squares 末尾（见❹）。最后，循环结束后，打印列表 squares（见❺）：

[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

为了让代码更简洁，可不使用临时变量 square，而直接将每个计算得到的值附加到列表末尾：

squares = []
for value in range(1,11):
❶    squares.append(value**2)

print(squares)

❶处的代码与 squares.py 中❸处和❹处的代码等效。在循环中，计算每个值的平方，并立即将结果附加到
列表 squares 的末尾。

创建更复杂的列表时，可使用上述两种方法中的任何一种。有时候，使用临时变量会让代码更易读；而在其他
情况下，这样做只会让代码无谓地变长。你首先应该考虑的是，编写清晰易懂且能完成所需功能的代码，等到
审核代码时，再考虑采用更高效的方法。



3、对数字列表执行简单的统计计算

有几个专门用于处理数字列表的 Python 函数。例如，你可以轻松地找出数字列表的最大值、最小值和总和：

>>> digits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
>>> min(digits)
0
>>> max(digits)
9
>>> sum(digits)
45

注意：这里使用的数字列表都很短，但实际上也适用于包含数百万个数的列表。



4、列表解析

前面介绍的生成列表 squares 的方式包含三四行代码，而列表解析让你只需编写一行代码就能生成这样的列表。
列表解析将 for 循环和创建新元素的代码合并成一行，并自动附加新元素。

下面的示例使用列表解析创建你在前面看到的平方数列表：

squares = [value**2 for value in range(1, 11)]
print(squares)

要使用这种语法，首先指定一个描述性的列表名，如 squares。然后，指定一个左方括号，并定义一个表达式，
用于生成要存储到列表中的值。在这个示例中，表达式为 value**2，它计算平方值。接下来，编写一个for
循环，用于给表达式提供值，再加上右方括号。在这个示例中，for 循环为 for value in range(1,11)，
它将值 1～10 提供给表达式 value**2。请注意，这里的 for 语句末尾没有冒号。

结果与前面的平方数列表相同：

[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

要创建自己的列表解析，需要经过一定的练习，但能够熟练地创建常规列表后，你会发现这样做是完全值得的。
当你觉得编写三四行代码来生成列表有点繁复时，就应考虑创建列表解析了。

"""